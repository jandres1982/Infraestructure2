#requires -Version 2
<#
        .SYNOPSIS
        Checkscript for a specific test.
        .DESCRIPTION
        This script is based on the MasterCheck.ps1 script.
        The script take a specific check which is definied, and write the result back to the MasterCheck script.

        The following function can be used from the Masterscript MasterCheck.ps1:
        LogWriter (Write in the specified Logfile of the MasterCheck.ps1 script)
        WriteCheckElement (writes the result of this check to the Result file which is defined in the MasterCheck.ps1 script)
                       
        .EXAMPLE
        Functions which are used from MasterCheck...
        LogWriter "my input for the Logfile..." (Add entry with timestamp...)
        LogWriter "my input for the Logfile..." 0 (without timestamp for headers etc...)
        WriteCheckElement -State $true -Info "No more Infomation." -error "Information about the Error if exists." -Area "OS" -ShortDesc "Example" -Desc "Description for the example" -CheckID ChecksciptTemplate

        .NOTES
        Information about the type of the parameters in WriteCheckElement:

        -[boolean]State     ($true | $false)
        If the check is passed then $true else $false (writes additional infos below the error message)
  
        -[string]Info
        Information to the check (optional)
  
        -[string]error
        Important information when the check failed.
        example: -error "<h2>this is the error</h2><ul><li>item 1</li><li>item 2</li><li>item 3</li></ul>"
  
        -[string]Area  
        Defined the area of the checkScript

        -[string]ShortDesc
        Short description of the check    
 
        -[string]Desc
        Detaildescription about the script
 
        -CheckID
        This ist the name of the script and unique
 
        # ######################################################################
        # ScriptName:   CheckAntiVirusSoftwareCompany.ps1
        # Description:  Check of the required Anti-Virus software
        # Created by:   x86 & Cloud Automatisation | Matthias Fankhauser | matthias.fakhauser@swisscom.com
        # CreateDate:   18.01.2016
        #
        # History:
        # Version 1.0   |   18.01.2016 | Matthias Fankhauser | First version
        # Version 1.1   |   18.01.2016 | Matthias Fankhauser | Review
        # ######################################################################
#>
param
(
    [Parameter(Mandatory    = $false)][bool]$Collectinfo = $false                 	# Parameter to collect Scriptinformations   
)

$ScriptVersion = '1.1'      # Version
# #################################### General !!! Do not change !!!##############################
#region General definitions
$CScriptRootFolder     = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition       	# Script RootFolder
$CScriptNameFull       = $MyInvocation.MyCommand.Definition                          	# Full path of this script including scriptname
$CScriptName           = [IO.Path]::GetFileNameWithoutExtension($CScriptNameFull)   	# Only the scriptname without extention
$ThisComputername       = $env:COMPUTERNAME                                           # This computername
$ThisDomain             = $env:USERDNSDOMAIN                                          # This domain
$ThisServerFQDN         = $ThisComputername.ToUpper()                                 # Build FQDN string
If(!($ThisDomain -eq $null))
{
    $ThisServerFQDN     = $ThisComputername + '.' + $ThisDomain
}

# Current username that run this script
$DateTimestamp          = Get-Date -Format 'dd.MM.yyyy HH:mm:ss'                    	# Current date and time
# OS description (name)
#endregion
# ######################################################################

# ----------------------------------------------------------------------------------------------------- 
# ########################## Script Paramenter (Costumized for each script)############################
#region Header Informations
# This items are to define based on the Excelsheet with the Checks.

#CheckArea (Where is this check required)
[bool]$PreCheck 			= $false
[bool]$QCheck 				= $true

#Area
[string]$Area 				= 'Malware'

#Short Descripton of the Script
[string]$ShortDescription 	= 'Check if Malware Protection has been installed' 

#Detaildescripton of the Script
[string]$DetailDescription 	= 'Check if Antivirus Protection has been installed and if patterns are up to date' 
 
#Products
[array]$products 			= 'Full' , 'Limited'

#endregion
# ######################################################################
# -----------------------------------------------------------------------------------------------------
 
# ####################### Functions ##########################
#region Functions of the Masterscript !!! Must be on Top of this Script !!!
# #################################################

# Collect informations about this script
function PutScriptInfo ()
{
    CollectScriptInfo -Area $Area -CheckScriptFullPath  $CScriptNameFull -CheckID $CScriptName -products $products -PreCheck $PreCheck -QCheck $QCheck
}
#endregion
# #################################################
 

# ########################## Script static Paramenters !!! Do not change !!! ############################
#region Script static Paramenters
[string]$CheckID			= $CScriptName	# CheckID is the Scriptname
[bool]	$Script:State 				= $false		#State Check
[string]$Script:Information 		= ''			#Additional information
[string]$Script:ErrorInformation 	= ''			#ErrorInformation

# Run only when the argument -Collectinfo is true --> exit
if($Collectinfo)
{
    PutScriptInfo
    exit
}
#endregion
# #######################################################################################################
 
# ########################## Script Paramenter ############################
#region Script specific parameters
$sb = New-Object -TypeName System.Text.StringBuilder      # Create stringbuilder object...
$null = $sb.Clear # Clear stringbuilder object

$sbinfo = New-Object -TypeName System.Text.StringBuilder      # Create stringbuilder object...
$null = $sbinfo.Clear # Clear stringbuilder object

$sbe = New-Object -TypeName System.Text.StringBuilder      # Create stringbuilder object...
$null = $sbe.Clear # Clear stringbuilder object

# ##########################################################################
 
# ####################################################################################################### 
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++++++++++++++ Here is the section for the Check ++++++++++++++
#
# Required Output of this Script:
# 
# $Script:State = $true | $false (Is the Check OK or not OK)
# $Script:Information = "...." (Aditional Information about the result)
# $Script:ErrorInformation = "Information about non passed check"
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
#region checkscript
function Get-McAfeeRegistry 
{ 
    <#
            .SYNOPSIS
            Get McAfee Reg values
            .DESCRIPTION
            Get the specific McAfee Reg values
    #>
    
    $Computer = $env:COMPUTERNAME
    
    Try
    {
        $Script:CurrentProductName = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine',$Computer).OpenSubKey('SOFTWARE\Wow6432Node\McAfee\DesktopProtection').GetValue('Product')
        $Script:CurrentProductVersion = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine',$Computer).OpenSubKey('SOFTWARE\Wow6432Node\McAfee\DesktopProtection').GetValue('szProductVer') 
        
        $Script:CurrentEngineVersionMajor = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine',$Computer).OpenSubKey('SOFTWARE\Wow6432Node\McAfee\AVEngine').GetValue('EngineVersionMajor') 
        $Script:CurrentEngineVersionMinor = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine',$Computer).OpenSubKey('SOFTWARE\Wow6432Node\McAfee\AVEngine').GetValue('EngineVersionMinor') 
        $Script:CurrentDatVersion = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine',$Computer).OpenSubKey('SOFTWARE\Wow6432Node\McAfee\AVEngine').GetValue('AVDatVersion') 
        $Script:CurrentDatDate = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine',$Computer).OpenSubKey('SOFTWARE\Wow6432Node\McAfee\AVEngine').GetValue('AVDatDate') 
    }
    catch
    {
        $Script:StateRegOK = $false
    }
}

function Get-McAfeeServiceState
{
    <#
            .SYNOPSIS
            Get Services McAfee
            .DESCRIPTION
            Get the service state for the selected services
    #>

    [CmdletBinding()]

    PARAM
    (
        [Parameter(Mandatory = $true)] [string]$ServiceToCheck
    )

    Begin
    {
        $ServiceToCheckObj = Get-WmiObject -Class win32_service -Filter "name='$ServiceToCheck'"

        $objName = $ServiceToCheckObj.Name

        # Check Service state...
        if ($objName -eq $ServiceToCheck)
        {        
            # If Service is running
            if ($ServiceToCheckObj.State -eq 'Running')
            {
                # If Start Mode is Auto
                if ($ServiceToCheckObj.StartMode -eq 'Auto')
                {
                    $null = $sbinfo.AppendLine("<li>The service $ServiceToCheck is running and Start Mode is AUTO_START.</li>")
                }
                else
                {    
                    $Script:StateServiceOK = $false
                    $null = $sbe.AppendLine("<li>The service $ServiceToCheck is running but Start Mode is no AUTO_START.</li>")
                }
            }
            else
            {
                # If Start Mode is Auto
                if ($ServiceToCheckObj.StartMode -eq 'Auto')
                {
                    $Script:StateServiceOK = $false
                    $null = $sbe.AppendLine("<li>The service $ServiceToCheck is not running, but Start Mode is AUTO_START.</li>")
                }
                else
                {
                    $Script:StateServiceOK = $false
                    $null = $sbe.AppendLine("<li>The service $ServiceToCheck is not running, and the  Start Mode is no AUTO_START.</li>")
                }
            }
        }
        else
        {
            $Script:StateServiceOK = $false
            $null = $sbe.AppendLine("<li>The service $ServiceToCheck does not exist!</li>")
        }
    }
}

# Company Requirements
$AntiVirusCompany = 'McAfee VirusScan Enterprise'
$AntiVirusCompanyVersion = '8.8.0.1247' 
$AntiVirusCompanyVersionMM = $AntiVirusCompanyVersion.substring(0,5)
[DateTime]$AntiVirusDatFileThreshold = ((Get-Date).AddDays(-5))
$AntiVirusDatFileThresholdLog = $AntiVirusDatFileThreshold.ToString('dd.MM.yyyy')
[Array]$McAfeeServices = 'McShield', 'McAfeeFramework'

# ScriptParameters
[string]$Script:CurrentProductName = $null
[string]$Script:CurrentProductVersion = $null
[string]$Script:CurrentEngineVersionMajor = $null
[string]$Script:CurrentEngineVersionMinor = $null
[string]$Script:CurrentDatVersion = $null
[string]$Script:CurrentDatDate = $null

# States
[bool]$Script:StateRegOK = $true
[bool]$Script:StateServiceOK = $true
[bool]$Script:StateDATOK = $true

$null = $sb.AppendLine('<p><b>Requirements Company</b></p>')

$McAfeeServiceslog = $McAfeeServices -join ', '

$null = $sb.AppendLine("<table class=`"infotable`">")
$null = $sb.AppendLine('<thead><tr><th>Item:</th><th>Value:</th></tr></thead>')
$null = $sb.AppendLine('<tbody>')
$null = $sb.AppendLine("<tr><td>Antivirus Software:</td><td>$AntiVirusCompany</td></tr>")
$null = $sb.AppendLine("<tr><td>Running services:</td><td>$McAfeeServiceslog</td></tr>")
$null = $sb.AppendLine("<tr><td>DAT-Date Threshold:</td><td>$AntiVirusDatFileThresholdLog</td></tr>")
$null = $sb.AppendLine('</tbody></table></br>')

$null = $sb.AppendLine('</br>')

$null = $sb.AppendLine('<p><b>Current Server</b></p></br>')


# Check Registry
Get-McAfeeRegistry 

# Check states registry
LogWriter 'Check registry...'
if($Script:StateRegOK -eq $true)
{
    $null = $sbinfo.AppendLine('<li>Registry OK</li>')
}
else
{
    $null = $sbe.AppendLine('<li>Check Registry failed</li>')
}

if($Script:StateRegOK -eq $true)
{
    # Check Services
    LogWriter 'Check services...'
    foreach($service in $McAfeeServices)
    {
        Get-McAfeeServiceState -ServiceToCheck $service
    }

    LogWriter 'Check DAT Files...'
    # Check DatFile State
    $DatDateConverted = [DateTime]$Script:CurrentDatDate
    $DatDateConvertedlog = $DatDateConverted.ToString('dd.MM.yyyy')

    if($DatDateConverted -gt $AntiVirusDatFileThreshold)
    {
        $null = $sbinfo.AppendLine("<li>DAT-File OK, last update: $DatDateConvertedlog </li>")
    }
    else
    {
        $Script:StateDATOK = $false
        $null = $sbe.AppendLine("<li>DAT-File state not OK, last update: $DatDateConvertedlog!</li>")
    }
}



LogWriter 'Check Results...'
# Build Log...
if(!([string]::IsNullOrEmpty($sb.ToString())))
{
    $Script:Information = $sb.ToString()
}

if(!([string]::IsNullOrEmpty($sbinfo.ToString())))
{
    $Script:Information += '<ul>'
    $Script:Information += $sbinfo.ToString()
    $Script:Information += '</ul>'
}

if(!([string]::IsNullOrEmpty($sbe.ToString())))
{
    $Script:ErrorInformation += '<ul>'

    $Script:ErrorInformation += $sbe.ToString()
    $Script:ErrorInformation += '</ul>'
}

if(($Script:StateRegOK -eq $true) -and ($Script:StateServiceOK -eq $true) -and ($Script:StateDATOK -eq $true))
{
    $Script:State = $true
}
else
{
    $Script:State = $false
}

#endregion
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  
# ########################## Push the result to the masterScript ############################ 
#region Push result
WriteCheckElement -State $State -Info $Information -error $ErrorInformation -Area $Area -ShortDesc $ShortDescription -Desc $DetailDescription -CheckID $CheckID
#endregion  
 